<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <script src="../../dist/webserver/scripts/live-update.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
        integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
        integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
</head>

<style>
    body {
        background: #FFFFFF;
        padding: 10px 10px 10px 10px;
        height: 100vh;
        justify-content: left;
        align-items: center;
        width: 100%;
    }

    .button {
        display: flex;
        justify-content: space-between;
        min-width: 100%;
        min-height: 40px;
        width: 60%;
        color: #000000;
        background-color: #7ECDFA;
        border: none;
        border-radius: 6px;
        box-shadow: #5DA7DE 0px 50px 100px -20px, #5DA7DE 0px 30px 60px -30px, #5DA7DE 0px -2px 6px 0px inset;
        text-align: left;
        padding-top: 1%;
        padding-left: 2%;
        padding-right: 2%;
        font-family: 'product_sansregular', sans-serif;
        font-size: 23px;
    }

    .checkbox {
        display: flex;
        min-width: 5%;
        min-height: 35px;
    }

    .button:hover {
        cursor: pointer;
        background-color: #94d3f7;
    }

    .boxDiv {
        align-items: left;
        width: 100%;
        border-style: double;
    }

    .parent {
        margin: 5px;
        width: 60%;
    }

    .child {
        margin: 5px 5px 5px 30px;
        width: 100%;
    }

    .enum-pane {
        border-style: double;
        border-color: black;
        float: left;
        margin-left: auto;
        margin-right: auto;
        margin-top: auto;
        margin-bottom: auto;
        width: 66.66%;
        height: 100%;
        overflow-y: scroll;
        font-family: 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;
    }

    .preview-pane {
        float: right;
        margin-left: auto;
        margin-right: auto;
        margin-top: auto;
        margin-bottom: auto;
        border-style: double;
        text-align: center;
        font-family: 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;
        color: black;
        background-color: white;
        width: 33.33%;
        height: 100%;
        overflow-y: scroll;
    }

    .access-top {
        margin-left: auto;
        margin-right: auto;
        margin-top: auto;
        margin-bottom: auto;
        background-color: silver;
        text-align: left;
        color: black;
        border-style: double;
        font-family: 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;
        font-weight: lighter;
    }

    .owner {
        margin-left: auto;
        margin-right: auto;
        margin-top: auto;
        margin-bottom: auto;
        background-color: salmon;
        text-indent: 5%;
        color: whitesmoke;
    }

    .selected-preview {
        background-color: gray;
        height: 100%;
        text-align: center;
        font-family: 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;
        color: whitesmoke
    }
</style>

<body>
    <div class="jumbotron text-center">
        <Header>
            <h1>Welcome to Drive Permission Manager</h1>
        </Header>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
    <div class="preview-pane">
        <div class="access-top">
            <h1>Preview</h1>
        </div>
        <button type="button" class="btn btn-primary add" data-toggle="modal" data-target="#myModal">Add</button>
        <div class="modal fade" id="myModal" tabindex="-1" data-backdrop="static" data-keyboard="true"
            aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog  modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="myModalLabel">Add Permission(s)</h4>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <form onsubmit="addPermission();">
                           
                    </div>
                    <div class="modal-footer">
                        <button type="button" onclick="addPermission()" class="btn btn-primary"
                            data-dismiss="modal">Submit</button>
                    </div>
                </div>
            </div>
        </div
        <p id='list'></p>
        <script type="text/JavaScript">
            const files = JSON.parse(`<%- JSON.stringify(array)%>`);
            </script>
    </div>
    <div class="enum-pane" id='box'>
        <div class="access-top">
            <h1>Drive Contents</h1>
        </div>


        <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
        <script>

            // Create an array of all the files/folders that are children of another folder
            const children = files.reduce((children, curr) => {
                return [...children, ...(curr.children || [])];
            }, []);
            // These are the root buttons because they are not children
            const rootParents = files.filter((file) => !children.includes(file.id));
            const onClickHandler = (event) => {
                // Stop click event from propagating up the DOM tree and clicking other buttons
                event.stopPropagation();
                // Select the button's parent (button container) and all its children nodes
                const fileId = event.target.parentNode.id;

                //
                // Preview pane stuff for single file selection
                //

                if (document.querySelectorAll("input[type=checkbox]:checked").length <= 0) {
                    const previewFile = _.find(files, { 'id': fileId });

                    var r = '<p>' + '<h2>' + _.get(previewFile, 'name') + '</h2>' + '</p>';
                    r = r + '<h3>Owner</h3>' + '<div name="info" class = "dropdown"><button class="btn btn-default dropdown-toggle" type="button" width="100" id="menu1" data-toggle="dropdown">' + _.get(previewFile, 'owners[0].displayName') + '<span class="caret"></span></button>'
                    r = r + '<ul class="dropdown-menu" role="menu" aria-labelledby="menu1">'
                    r = r + '<li role="presentation"><a role="menuitem" tabindex="-1" href="#">' + '<b>EMAIL: </b>' + ' ' + _.get(previewFile, 'owners[0].emailAddress') + '</a></li>'
                    r = r + '</ul>' + '</div>'

                    var j = _.get(previewFile, 'owners[0].displayName');
                    var x = '<br>' + ' ' + '</br>';
                    var z = _.get(previewFile, 'permissions');
                    var t = [];

                    for (let index2 = 0; index2 < z.length; index2++) {
                        if (_.get(z[index2], 'user.displayName') !== "drive-permission-manager@driver-permission-manager.iam.gserviceaccount.com" && _.get(previewFile, 'owners[0].displayName') !== _.get(z[index2], 'user.displayName')) {
                            var q = '<div name="info" class = "dropdown"><button class="btn btn-default dropdown-toggle" type="button" width="100" id="menu1" data-toggle="dropdown">' + _.get(z[index2], 'user.displayName') + '<span class="caret"></span></button>'
                            q = q + '<ul class="dropdown-menu" role="menu" aria-labelledby="menu1">'
                            q = q + '<li role="presentation"><a role="menuitem" tabindex="-1" href="#">' + '<b>EMAIL: </b>' + ' ' + _.get(z[index2], 'user.emailAddress') + '</a></li>'
                            q = q + '<li role="presentation"><a role="menuitem" tabindex="-1" href="#">' + '<b>ROLE: </b>' + _.get(z[index2], 'role') + '</a></li>'
                            q = q + '</ul>' + '</div>'
                            t = t + q;
                        }
                    }
                    document.getElementById('list').innerHTML = '';
                    document.getElementById('list').innerHTML = '<div>' + document.getElementById('list').innerHTML + ' ' + r + '<h2>Who has access</h2>' + t + x + '</div>';
                }
                //
                // End preview pane stuff
                //

                const buttonContainer = document.getElementById(fileId);
                const containerNodes = buttonContainer.children;
                if (containerNodes && Array.from(containerNodes).length > 1) {
                    // Button container has child nodes besides the button/folder itself, so "close" the folder
                    // Iterate through each child and remove the child from the button container
                    Array.from(containerNodes).forEach((node, index) => {
                        // Do nothing to the first child, since this is the folder/button itself
                        if (index === 0) return;
                        buttonContainer.removeChild(node);
                    });
                } else {
                    // Button container does not have other children besides the button/folder itself, so "open" the folder
                    // Find the file from the parsed JSON and append a button for each child to the button container
                    const file = files.find((file) => file.id === fileId);
                    (file.children || []).forEach((childId) => {
                        const childFile = files.find((file) => file.id === childId);
                        const childButton = createButton(childFile, ['child']);
                        buttonContainer.appendChild(childButton);
                    });
                }
            }
            // Creates a new button element and applies class names to the button container
            const createButton = (file, classNames = []) => {
                const buttonContainer = document.createElement('div');
                buttonContainer.className = classNames.join(' ');
                // This id is used to find where children will be appended in onClickHandler
                buttonContainer.id = file.id;
                const button = document.createElement('div');
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'checkbox';
                button.className = 'button';
                button.textContent = file.name;
                // Listen and wait to call onClickHandler when button is clicked
                button.addEventListener('click', onClickHandler);
                buttonContainer.appendChild(button);
                button.appendChild(checkbox);
                checkbox.addEventListener('click', function (event) {
                    //change the color of the button on checkbox toggle
                    if (checkbox.checked) {
                        button.style.backgroundColor = 'grey';


                        // Preview pane stuff

                        var checkboxs = document.querySelectorAll("input[type=checkbox]:checked");
                        var numSelected = checkboxs.length;
                        document.getElementById('list').innerHTML = '';
                        document.getElementById('list').innerHTML = '<div class = "selected-preview">' + '<h2>' + numSelected + ' Files Selected' + '</h2>' + '</div>'



                    } else {
                        button.style.backgroundColor = buttonContainer.style.backgroundColor;
                    }
                    // if parent is checked, check all children
                    if (checkbox.checked) {
                        var children = buttonContainer.getElementsByClassName('checkbox');
                        for (var i = 0; i < children.length; i++) {
                            children[i].checked = true;
                            children[i].parentElement.style.backgroundColor = 'grey';
                        }

                        // if parent is unchecked, uncheck all children    

                        // Preview pane stuff

                        var checkboxs = document.querySelectorAll("input[type=checkbox]:checked");
                        var numSelected = checkboxs.length;
                        document.getElementById('list').innerHTML = '';
                        document.getElementById('list').innerHTML = '<div class = "selected-preview">' + '<h2>' + numSelected + ' Files Selected' + '</h2>' + '</div>'

                        // End preview pane stuff

                        // if parent is unchecked, uncheck all children    
                    } else {
                        var children = buttonContainer.getElementsByClassName('checkbox');
                        for (var i = 0; i < children.length; i++) {
                            children[i].checked = false;
                            children[i].parentElement.style.backgroundColor = buttonContainer.style.backgroundColor;
                        }

                        // Preview pane stuff

                        var checkboxs = document.querySelectorAll("input[type=checkbox]:checked");
                        var numSelected = checkboxs.length;
                        document.getElementById('list').innerHTML = '';
                        document.getElementById('list').innerHTML = '<div class = "selected-preview">' + '<h2>' + numSelected + ' Files Selected' + '</h2>' + '</div>'

                        // End preview pane stuff

                    }
                });
                return buttonContainer;
            }
            // Add the root parent folders to the root container to start
            const box = document.getElementById('box');
            rootParents.forEach((parent) => {
                box.appendChild(createButton(parent, ['parent']));
            });
        </script>
    </div>
</body>

</html>