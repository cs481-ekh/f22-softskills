<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <script src="../../dist/webserver/scripts/live-update.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
        integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
        integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
</head>


<body>
    <script>
        function addPermission() {
            let emails = document.getElementById('emailTextEntry').value;
            let permission = document.getElementById('inputState').value;
            let fileIds = Array.from(document.querySelectorAll("input[type=checkbox]:checked"));
            let fileIdArray = [];
            let emailArray = emails.split('\n');

            document.getElementById('emailTextEntry').value = '';
            document.getElementById('inputState').value = 'choose...';

            for (let i = 0; i < fileIds.length; i++) {
                fileIdArray.push(fileIds[i].name)
            }

            const addPost = async (fileId, role, granteeType, emails) => {
                const url = `/addPermission`;
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        fileId: fileIdArray,
                        role: role,
                        granteeType: granteeType,
                        emails: emailArray
                    })
                });
                if (response.status !== 200) {
                    throw new Error('Error setting permission');
                }
            }
        }

        function checkBoxCounter() {
            let checkboxs = document.querySelectorAll("input[type=checkbox]:checked");
            let numSelected = checkboxs.length;
            document.getElementById('list').innerHTML = '';
            document.getElementById('list').innerHTML = '<div class = "selected-preview">' + '<h1 class = "file-counter">' + '<p id ="countText">' + numSelected + ' file(s) selected.' + '</p>' + '</h1>' + '</div>'
        }

        function getCheckBoxCounter() {
            let checkboxCount = document.getElementById('countText').innerHTML;
            document.getElementById('areSure').innerHTML = ' ' + '<h1>' + checkboxCount + '</h1>' + document.getElementById('areSure').innerHTML;
        }

        function preview(files, fileId) {
            if (document.querySelectorAll("input[type=checkbox]:checked").length <= 0) {
                const previewFile = _.find(files, { 'id': fileId });
                let titleOwner = '<p>' + '<h2 id="singleSelectId" name ="' + _.get(previewFile, 'id') + '">' + _.get(previewFile, 'name') + '</h2>' + '</p>';
                titleOwner = titleOwner + '<h3>Owner</h3>' + '<div name="info" class = "dropdown"><button class="btn btn-default dropdown-toggle" type="button" width="100" id="menu1" data-toggle="dropdown">' + _.get(previewFile, 'owners[0].displayName') + '<span class="caret"></span></button>'
                titleOwner = titleOwner + '<ul class="dropdown-menu" role="menu" aria-labelledby="menu1">'
                titleOwner = titleOwner + '<li role="presentation"><a role="menuitem" tabindex="-1" href="#">' + '<b>EMAIL: </b>' + ' ' + _.get(previewFile, 'owners[0].emailAddress') + '</a></li>'
                titleOwner = titleOwner + '</ul>' + '</div>';
                let filePermissions = _.get(previewFile, 'permissions');
                let accessList = [];
                for (let index = 0; index < filePermissions.length; index++) {
                    if (_.get(filePermissions[index], 'user.displayName') !== "drive-permission-manager@driver-permission-manager.iam.gserviceaccount.com" && _.get(previewFile, 'owners[0].displayName') !== _.get(filePermissions[index], 'user.displayName')) {
                        let accessHolder = '<div name="info" class = "dropdown"><button class="btn btn-default dropdown-toggle" type="button" width="100" id="menu1" data-toggle="dropdown">' + _.get(filePermissions[index], 'user.displayName') + '<span class="caret"></span></button>'
                        accessHolder = accessHolder + '<ul class="dropdown-menu" role="menu" aria-labelledby="menu1">'
                        accessHolder = accessHolder + '<li role="presentation"><a role="menuitem" tabindex="-1" href="#">' + '<b>EMAIL: </b>' + ' ' + _.get(filePermissions[index], 'user.emailAddress') + '</a></li>'
                        accessHolder = accessHolder + '<li role="presentation"><a role="menuitem" tabindex="-1" href="#">' + '<b>ROLE: </b>' + _.get(filePermissions[index], 'role') + '</a></li>'
                        accessHolder = accessHolder + '</ul>' + '</div>'
                        accessList = accessList + accessHolder;
                    }
                }
                document.getElementById('list').innerHTML = '';
                document.getElementById('list').innerHTML = '<div>' + document.getElementById('list').innerHTML + ' ' + titleOwner + '<h2>Who has access</h2>' + accessList + '<br>' + ' ' + '</br>' + '</div>';
            }
        }
    </script>

<body>
    <script>
        function addPermission() {
            let emails = document.getElementById('emailTextEntry').value;
            let permission = document.getElementById('inputState').value;
            let fileIds = Array.from(document.querySelectorAll("input[type=checkbox]:checked"));
            let fileIdArray = [];
            let emailArray = emails.split('\n');

            document.getElementById('emailTextEntry').value = '';
            document.getElementById('inputState').value = 'choose...';

            for (let i = 0; i < fileIds.length; i++) {
                fileIdArray.push(fileIds[i].name)
            }

            const addPost = async (fileId, role, granteeType, emails) => {
                const url = `/addPermission`;
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        fileId: fileIdArray,
                        role: role,
                        granteeType: granteeType,
                        emails: emailArray
                    })
                });
                if (response.status !== 200) {
                    throw new Error('Error setting permission');
                }
            }
        }
    </script>

    <div class="jumbotron text-center">
        <Header>
            <h1>Welcome to Drive Permission Manager</h1>
        </Header>
    </div>
    <div class="preview-pane">
        <div class="access-top">
            <h1>Preview</h1>
        </div>
        <button type="button" class="btn btn-primary add" data-toggle="modal" data-target="#myModal">Add</button>
        <div class="modal fade" id="myModal" tabindex="-1" data-backdrop="static" data-keyboard="true"
            aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog  modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="myModalLabel">Add Permission(s)</h4>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <form onsubmit="">
                            <div class="form-row">
                            </div>
                            <div class="form-group">
                                <label for="emailTextEntry">Email Address(s)</label>
                                <textarea class="form-control" id="emailTextEntry" rows="3"></textarea>
                            </div>
                            <div class="form-group col-md-4">
                                <label for="inputState">Permission</label>
                                <select id="inputState" class="form-control">
                                    <option selected>choose...</option>
                                    <option>commenter</option>
                                    <option>reader</option>
                                    <option>writer</option>
                                </select>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" onclick="addPermission()" class="btn btn-primary"
                            data-dismiss="modal">Submit</button>
                    </div>
                </div>
            </div>
        </div>
        <p id='list'>
        </p>
        <script type="text/JavaScript">
            const files = JSON.parse(`<%- JSON.stringify(array)%>`);
            </script>
    </div>
    <div class="enum-pane" id='box'>
        <div class="access-top">
            <h1>Drive Contents</h1>
        </div>

        <script>
            // Create an array of all the files/folders that are children of another folder
            const children = files.reduce((children, curr) => {
                return [...children, ...(curr.children || [])];
            }, []);
            // These are the root buttons because they are not children
            const rootParents = files.filter((file) => !children.includes(file.id));
            const onClickHandler = (event) => {
                // Stop click event from propagating up the DOM tree and clicking other buttons
                event.stopPropagation();
                // Select the button's parent (button container) and all its children nodes
                const fileId = event.target.parentNode.id;
                preview(files, fileId);
                const buttonContainer = document.getElementById(fileId);
                const containerNodes = buttonContainer.children;
                if (containerNodes && Array.from(containerNodes).length > 1) {
                    // Button container has child nodes besides the button/folder itself, so "close" the folder
                    // Iterate through each child and remove the child from the button container
                    Array.from(containerNodes).forEach((node, index) => {
                        // Do nothing to the first child, since this is the folder/button itself
                        if (index === 0) return;
                        buttonContainer.removeChild(node);
                    });
                } else {
                    // Button container does not have other children besides the button/folder itself, so "open" the folder
                    // Find the file from the parsed JSON and append a button for each child to the button container
                    const file = files.find((file) => file.id === fileId);
                    (file.children || []).forEach((childId) => {
                        const childFile = files.find((file) => file.id === childId);
                        const childButton = createButton(childFile, ['child']);
                        buttonContainer.appendChild(childButton);
                    });
                }
            }
            // Creates a new button element and applies class names to the button container
            const createButton = (file, classNames = []) => {
                const buttonContainer = document.createElement('div');
                buttonContainer.className = classNames.join(' ');
                // This id is used to find where children will be appended in onClickHandler
                buttonContainer.id = file.id;
                const button = document.createElement('div');
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'checkbox';
                button.className = 'button';
                button.textContent = file.name;
                // Listen and wait to call onClickHandler when button is clicked
                button.addEventListener('click', onClickHandler);
                buttonContainer.appendChild(button);
                button.appendChild(checkbox);
                checkbox.addEventListener('click', function (event) {
                    //change the color of the button on checkbox toggle
                    if (checkbox.checked) {
                        button.style.backgroundColor = 'grey';
                        checkBoxCounter();
                    } else {
                        button.style.backgroundColor = buttonContainer.style.backgroundColor;
                    }
                    // if parent is checked, check all children
                    if (checkbox.checked) {
                        var children = buttonContainer.getElementsByClassName('checkbox');
                        for (var i = 0; i < children.length; i++) {
                            children[i].checked = true;
                            children[i].parentElement.style.backgroundColor = 'grey';
                        }
                        checkBoxCounter()
                        // if parent is unchecked, uncheck all children    
                    } else {
                        var children = buttonContainer.getElementsByClassName('checkbox');
                        for (var i = 0; i < children.length; i++) {
                            children[i].checked = false;
                            children[i].parentElement.style.backgroundColor = buttonContainer.style.backgroundColor;
                        }
                        checkBoxCounter()
                    }
                });
                return buttonContainer;
            }
            // Add the root parent folders to the root container to start
            const box = document.getElementById('box');
            const removeButton = document.getElementById('remove');

            const setPermission = async (fileId, permissionId) => {
                const url = `/deletePermission`;
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        fileId: fileId,
                        permissionId: permissionId
                    })
                });
                if (response.status !== 200) {
                    throw new Error('Error setting permission');
                }
            }

            removeButton.addEventListener('click', (event) => {
                const checkBoxes = document.getElementsByClassName('checkbox');
                const isChecked = Array.from(checkBoxes).filter((checkbox) => checkbox.checked);
                isChecked.forEach((file) => {
                    const fileId = file.parentNode.parentNode.id;
                    const permissionIds = (files.find((file) => file.id === fileId).permissions || []).map((permission) => permission.id);
                    permissionIds.forEach((permissionId) => {
                        setPermission(fileId, permissionId);
                    });
                });
            });
            rootParents.forEach((parent) => {
                box.appendChild(createButton(parent, ['parent']));
            });
        </script>

    </div>
</body>
</html>